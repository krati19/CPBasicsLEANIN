1.)https://leetcode.com/problems/jewels-and-stones/
class Solution 
{
public:
 int numJewelsInStones(string jewels, string stones) 
    {
        int n=jewels.size();
        int m=stones.size();
        map<char,int>mp;
        for(int i=0;i<n;i++){
            mp[jewels[i]]=1;
        }
        int total=0;
        for (int i=0;i<m;i++)
     {
         total+=mp[stones[i]];
       }
        return total;
    }
};
2.)https://leetcode.com/problems/merge-strings-alternately/
class Solution 
{
public:
    string mergeAlternately(string word1, string word2)
    {
        int i=0;
        int j=0;
        string res="";
        while(i<word1.size()&&j<word2.size())
        {
            res=res+word1[i++];
            res=res+word2[j++];
        }
        while(i<word1.size())
        {
            res=res+word1[i++];
         }
        while(j<word2.size())
        {
            res=res+word2[j++];
        }        
  return res;
    }
 };
5.)https://leetcode.com/problems/sort-array-by-parity/
class Solution {
public:
    vector<int> sortArrayByParity(vector<int>& nums) 
    {
        int l=0,r=nums.size()-1;
        while(l<r)
        {
            while(l<r&&nums[l]%2==0)
                l++;
            while(l<r&&nums[r]%2!=0)
                r--;
            int temp=nums[l];
            nums[l]=nums[r];
            nums[r]=temp;
            
         }
        return nums;
    }
};
6.)https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        int minprice=INT_MAX;
        int maxprofit=0;
        for(int i=0;i<prices.size();i++)
        {
            minprice=min(minprice,prices[i]);
            maxprofit=max(maxprofit,prices[i]-minprice);
        }
        return maxprofit;
    }
};
7.)https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii
class Solution {
public:
    int maxProfit(vector<int>& prices) 
    {
        int maxprofit=0;
        for(int i=1;i<prices.size();i++)
            if(prices[i]>prices[i-1])
            maxprofit=maxprofit+(prices[i]-prices[i-1]);
            return maxprofit;
    }
};
