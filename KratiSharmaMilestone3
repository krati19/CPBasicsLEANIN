Q1.)https://leetcode.com/problems/reorder-list/

class Solution 
{
public:
    void reorderList(ListNode* head)
    {
      if(!head || !head->next) return;
        
        ListNode *slow = head, *fast = head;
        while(fast && fast->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode *prev = nullptr, *curr = slow, *tmp;
        while(curr){
            tmp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = tmp;
        }
        
        ListNode *n1 = head, *n2 = prev;
        while(n2->next){
            tmp = n1->next;
            n1->next = n2;
            n1 = tmp;
            
            tmp = n2->next;
            n2->next = n1;
            n2 = tmp;
        }   
    }
};

Q2.)https://leetcode.com/problems/min-stack/

class MinStack {
    int stack[10000];
    int min[10000];
    int topPtr;
    int minPtr;
public:
    MinStack() {
        topPtr = -1;
        minPtr = -1;
    }
    
    void push(int x) {
        if(topPtr >= 10000)
            return;
        
        stack[++topPtr] = x;
        
        if(minPtr >= 0)
        {
            if(min[minPtr] > x)
                min[++minPtr] = x;
            else
            {
                min[minPtr+1] = min[minPtr];
                minPtr += 1;
            }
        }
        else
            min[++minPtr] = x;
                
    }
    
    void pop() {
        if(topPtr < 0)      //Underflow
            return;
        
        topPtr -= 1;
        minPtr -= 1;
    }
    
    int top() {        
        return stack[topPtr];
    }
    
    int getMin() {
        return min[minPtr];
    }
};

Q3.)https://leetcode.com/problemsclass MyStack 
 {
public:
    queue<int> que;
    MyStack()
    {
        
    }
    void push(int x)
    {
        que.push(x);
		for(int i=0;i<que.size()-1;++i)
{
			que.push(que.front());
			que.pop();
	}
    }
    
   int pop() 
   {
        int x = que.front(); 
        que.pop(); 
        return x; 
    }
    int top() 
    {
        return que.front();
    }
     bool empty()
     {
        return que.size() == 0; 
    }
};

Q4.)https://leetcode.com/problems/implement-queue-using-stacks

class MyQueue {
public:
    stack<int> input, output;
    
    MyQueue() {
        
    }
    
    
    void push(int x) {
        input.push(x);
    }
    
    
    int pop() {
        
        if (output.empty())
            while (input.size())
                output.push(input.top()), input.pop();

        int x = output.top();
        output.pop(); 
        return x; 
    }
    
    
    int peek() {
         
        if (output.empty())
            while (input.size())
                output.push(input.top()), input.pop();
        return output.top(); 
    }
    
   
    bool empty() {
        return input.empty() && output.empty();
    }
};

Q5.)https://leetcode.com/problems/merge-two-sorted-lists

class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        struct ListNode *temp = new ListNode(0), *head = new ListNode(0);
        int flag = 0;
        if(l1 == NULL && l2 == NULL)
            return NULL;
        else if(l1 == NULL)
            return l2;
        else if(l2 == NULL)
            return l1;
        while(l1 != NULL && l2 != NULL){
            if(l1->val < l2->val){
                if(flag == 0){
                    head = l1;
                    temp = head;
                }
                else{
                    temp->next = l1;
                    temp = temp->next;
                }
                l1 = l1->next;
            }
            else{
                if(flag == 0){
                    head = l2;
                    temp = head;
                }
                else{
                    temp->next = l2;
                    temp = temp->next;
                }
                l2 = l2->next;
            }
            flag = 1;
        }
        while(l1 != NULL){
            temp->next = l1;
            temp = temp->next;
            l1 = l1->next;
        }
        while(l2 != NULL){
            temp->next = l2;
            temp = temp->next;
            l2 = l2->next;
        }
        return head;
    }
};

Q6.)https://leetcode.com/problems/linked-list-cycle

class Solution
{
public:
    bool hasCycle(ListNode *head)
    {
        ListNode *fast = head;
        ListNode *slow = head;
        while (slow != nullptr && fast != nullptr && fast->next != nullptr)
        {
            slow = slow->next;
            fast = fast->next->next;
            if (slow == fast) return true;
        }
        return false;
    }
};




